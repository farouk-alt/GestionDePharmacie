/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package gestion_de_pharmacie.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import gestion_de_pharmacie.model.Utilisateur;
import gestion_de_pharmacie.model.UtilisateurModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Utilisateur service. Represents a row in the &quot;Pharma_Utilisateur&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>UtilisateurModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UtilisateurImpl}.
 * </p>
 *
 * @author Farouk
 * @see UtilisateurImpl
 * @generated
 */
@JSON(strict = true)
public class UtilisateurModelImpl
	extends BaseModelImpl<Utilisateur> implements UtilisateurModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a utilisateur model instance should use the <code>Utilisateur</code> interface instead.
	 */
	public static final String TABLE_NAME = "Pharma_Utilisateur";

	public static final Object[][] TABLE_COLUMNS = {
		{"idUtilisateur", Types.BIGINT}, {"nom", Types.VARCHAR},
		{"prenom", Types.VARCHAR}, {"email", Types.VARCHAR},
		{"motDePasse", Types.VARCHAR}, {"role_", Types.VARCHAR},
		{"dateCreation", Types.TIMESTAMP}, {"lastLogin", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("idUtilisateur", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nom", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("prenom", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("motDePasse", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("role_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateCreation", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("lastLogin", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Pharma_Utilisateur (idUtilisateur LONG not null primary key,nom VARCHAR(75) null,prenom VARCHAR(75) null,email VARCHAR(75) null,motDePasse VARCHAR(75) null,role_ VARCHAR(75) null,dateCreation DATE null,lastLogin DATE null)";

	public static final String TABLE_SQL_DROP = "drop table Pharma_Utilisateur";

	public static final String ORDER_BY_JPQL =
		" ORDER BY utilisateur.idUtilisateur ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Pharma_Utilisateur.idUtilisateur ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EMAIL_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ROLE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long IDUTILISATEUR_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public UtilisateurModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _idUtilisateur;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setIdUtilisateur(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _idUtilisateur;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Utilisateur.class;
	}

	@Override
	public String getModelClassName() {
		return Utilisateur.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Utilisateur, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Utilisateur, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Utilisateur, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Utilisateur)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Utilisateur, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Utilisateur, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Utilisateur)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Utilisateur, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Utilisateur, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Utilisateur, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Utilisateur, Object>>
				attributeGetterFunctions =
					new LinkedHashMap<String, Function<Utilisateur, Object>>();

			attributeGetterFunctions.put(
				"idUtilisateur", Utilisateur::getIdUtilisateur);
			attributeGetterFunctions.put("nom", Utilisateur::getNom);
			attributeGetterFunctions.put("prenom", Utilisateur::getPrenom);
			attributeGetterFunctions.put("email", Utilisateur::getEmail);
			attributeGetterFunctions.put(
				"motDePasse", Utilisateur::getMotDePasse);
			attributeGetterFunctions.put("role", Utilisateur::getRole);
			attributeGetterFunctions.put(
				"dateCreation", Utilisateur::getDateCreation);
			attributeGetterFunctions.put(
				"lastLogin", Utilisateur::getLastLogin);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Utilisateur, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Utilisateur, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Utilisateur, ?>>();

			attributeSetterBiConsumers.put(
				"idUtilisateur",
				(BiConsumer<Utilisateur, Long>)Utilisateur::setIdUtilisateur);
			attributeSetterBiConsumers.put(
				"nom", (BiConsumer<Utilisateur, String>)Utilisateur::setNom);
			attributeSetterBiConsumers.put(
				"prenom",
				(BiConsumer<Utilisateur, String>)Utilisateur::setPrenom);
			attributeSetterBiConsumers.put(
				"email",
				(BiConsumer<Utilisateur, String>)Utilisateur::setEmail);
			attributeSetterBiConsumers.put(
				"motDePasse",
				(BiConsumer<Utilisateur, String>)Utilisateur::setMotDePasse);
			attributeSetterBiConsumers.put(
				"role", (BiConsumer<Utilisateur, String>)Utilisateur::setRole);
			attributeSetterBiConsumers.put(
				"dateCreation",
				(BiConsumer<Utilisateur, Date>)Utilisateur::setDateCreation);
			attributeSetterBiConsumers.put(
				"lastLogin",
				(BiConsumer<Utilisateur, Date>)Utilisateur::setLastLogin);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getIdUtilisateur() {
		return _idUtilisateur;
	}

	@Override
	public void setIdUtilisateur(long idUtilisateur) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_idUtilisateur = idUtilisateur;
	}

	@JSON
	@Override
	public String getNom() {
		if (_nom == null) {
			return "";
		}
		else {
			return _nom;
		}
	}

	@Override
	public void setNom(String nom) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nom = nom;
	}

	@JSON
	@Override
	public String getPrenom() {
		if (_prenom == null) {
			return "";
		}
		else {
			return _prenom;
		}
	}

	@Override
	public void setPrenom(String prenom) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_prenom = prenom;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email = email;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalEmail() {
		return getColumnOriginalValue("email");
	}

	@JSON
	@Override
	public String getMotDePasse() {
		if (_motDePasse == null) {
			return "";
		}
		else {
			return _motDePasse;
		}
	}

	@Override
	public void setMotDePasse(String motDePasse) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_motDePasse = motDePasse;
	}

	@JSON
	@Override
	public String getRole() {
		if (_role == null) {
			return "";
		}
		else {
			return _role;
		}
	}

	@Override
	public void setRole(String role) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_role = role;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalRole() {
		return getColumnOriginalValue("role_");
	}

	@JSON
	@Override
	public Date getDateCreation() {
		return _dateCreation;
	}

	@Override
	public void setDateCreation(Date dateCreation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateCreation = dateCreation;
	}

	@JSON
	@Override
	public Date getLastLogin() {
		return _lastLogin;
	}

	@Override
	public void setLastLogin(Date lastLogin) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastLogin = lastLogin;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Utilisateur.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Utilisateur toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Utilisateur>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UtilisateurImpl utilisateurImpl = new UtilisateurImpl();

		utilisateurImpl.setIdUtilisateur(getIdUtilisateur());
		utilisateurImpl.setNom(getNom());
		utilisateurImpl.setPrenom(getPrenom());
		utilisateurImpl.setEmail(getEmail());
		utilisateurImpl.setMotDePasse(getMotDePasse());
		utilisateurImpl.setRole(getRole());
		utilisateurImpl.setDateCreation(getDateCreation());
		utilisateurImpl.setLastLogin(getLastLogin());

		utilisateurImpl.resetOriginalValues();

		return utilisateurImpl;
	}

	@Override
	public Utilisateur cloneWithOriginalValues() {
		UtilisateurImpl utilisateurImpl = new UtilisateurImpl();

		utilisateurImpl.setIdUtilisateur(
			this.<Long>getColumnOriginalValue("idUtilisateur"));
		utilisateurImpl.setNom(this.<String>getColumnOriginalValue("nom"));
		utilisateurImpl.setPrenom(
			this.<String>getColumnOriginalValue("prenom"));
		utilisateurImpl.setEmail(this.<String>getColumnOriginalValue("email"));
		utilisateurImpl.setMotDePasse(
			this.<String>getColumnOriginalValue("motDePasse"));
		utilisateurImpl.setRole(this.<String>getColumnOriginalValue("role_"));
		utilisateurImpl.setDateCreation(
			this.<Date>getColumnOriginalValue("dateCreation"));
		utilisateurImpl.setLastLogin(
			this.<Date>getColumnOriginalValue("lastLogin"));

		return utilisateurImpl;
	}

	@Override
	public int compareTo(Utilisateur utilisateur) {
		long primaryKey = utilisateur.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Utilisateur)) {
			return false;
		}

		Utilisateur utilisateur = (Utilisateur)object;

		long primaryKey = utilisateur.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Utilisateur> toCacheModel() {
		UtilisateurCacheModel utilisateurCacheModel =
			new UtilisateurCacheModel();

		utilisateurCacheModel.idUtilisateur = getIdUtilisateur();

		utilisateurCacheModel.nom = getNom();

		String nom = utilisateurCacheModel.nom;

		if ((nom != null) && (nom.length() == 0)) {
			utilisateurCacheModel.nom = null;
		}

		utilisateurCacheModel.prenom = getPrenom();

		String prenom = utilisateurCacheModel.prenom;

		if ((prenom != null) && (prenom.length() == 0)) {
			utilisateurCacheModel.prenom = null;
		}

		utilisateurCacheModel.email = getEmail();

		String email = utilisateurCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			utilisateurCacheModel.email = null;
		}

		utilisateurCacheModel.motDePasse = getMotDePasse();

		String motDePasse = utilisateurCacheModel.motDePasse;

		if ((motDePasse != null) && (motDePasse.length() == 0)) {
			utilisateurCacheModel.motDePasse = null;
		}

		utilisateurCacheModel.role = getRole();

		String role = utilisateurCacheModel.role;

		if ((role != null) && (role.length() == 0)) {
			utilisateurCacheModel.role = null;
		}

		Date dateCreation = getDateCreation();

		if (dateCreation != null) {
			utilisateurCacheModel.dateCreation = dateCreation.getTime();
		}
		else {
			utilisateurCacheModel.dateCreation = Long.MIN_VALUE;
		}

		Date lastLogin = getLastLogin();

		if (lastLogin != null) {
			utilisateurCacheModel.lastLogin = lastLogin.getTime();
		}
		else {
			utilisateurCacheModel.lastLogin = Long.MIN_VALUE;
		}

		return utilisateurCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Utilisateur, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Utilisateur, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Utilisateur, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Utilisateur)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Utilisateur>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Utilisateur.class, ModelWrapper.class);

	}

	private long _idUtilisateur;
	private String _nom;
	private String _prenom;
	private String _email;
	private String _motDePasse;
	private String _role;
	private Date _dateCreation;
	private Date _lastLogin;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Utilisateur, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Utilisateur)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("idUtilisateur", _idUtilisateur);
		_columnOriginalValues.put("nom", _nom);
		_columnOriginalValues.put("prenom", _prenom);
		_columnOriginalValues.put("email", _email);
		_columnOriginalValues.put("motDePasse", _motDePasse);
		_columnOriginalValues.put("role_", _role);
		_columnOriginalValues.put("dateCreation", _dateCreation);
		_columnOriginalValues.put("lastLogin", _lastLogin);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("role_", "role");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("idUtilisateur", 1L);

		columnBitmasks.put("nom", 2L);

		columnBitmasks.put("prenom", 4L);

		columnBitmasks.put("email", 8L);

		columnBitmasks.put("motDePasse", 16L);

		columnBitmasks.put("role_", 32L);

		columnBitmasks.put("dateCreation", 64L);

		columnBitmasks.put("lastLogin", 128L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Utilisateur _escapedModel;

}