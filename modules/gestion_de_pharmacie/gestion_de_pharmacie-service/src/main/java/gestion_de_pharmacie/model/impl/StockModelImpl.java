/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package gestion_de_pharmacie.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import gestion_de_pharmacie.model.Stock;
import gestion_de_pharmacie.model.StockModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Stock service. Represents a row in the &quot;Pharma_Stock&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>StockModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StockImpl}.
 * </p>
 *
 * @author Farouk
 * @see StockImpl
 * @generated
 */
@JSON(strict = true)
public class StockModelImpl extends BaseModelImpl<Stock> implements StockModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a stock model instance should use the <code>Stock</code> interface instead.
	 */
	public static final String TABLE_NAME = "Pharma_Stock";

	public static final Object[][] TABLE_COLUMNS = {
		{"idStock", Types.BIGINT}, {"idMedicament", Types.BIGINT},
		{"quantiteDisponible", Types.INTEGER},
		{"dateDerniereMaj", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("idStock", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("idMedicament", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("quantiteDisponible", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("dateDerniereMaj", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Pharma_Stock (idStock LONG not null primary key,idMedicament LONG,quantiteDisponible INTEGER,dateDerniereMaj DATE null)";

	public static final String TABLE_SQL_DROP = "drop table Pharma_Stock";

	public static final String ORDER_BY_JPQL = " ORDER BY stock.idStock ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Pharma_Stock.idStock ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long IDMEDICAMENT_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long IDSTOCK_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public StockModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _idStock;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setIdStock(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _idStock;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Stock.class;
	}

	@Override
	public String getModelClassName() {
		return Stock.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Stock, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Stock, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Stock, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Stock)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Stock, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Stock, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Stock)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Stock, Object>> getAttributeGetterFunctions() {
		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Stock, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Stock, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Stock, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Stock, Object>>();

			attributeGetterFunctions.put("idStock", Stock::getIdStock);
			attributeGetterFunctions.put(
				"idMedicament", Stock::getIdMedicament);
			attributeGetterFunctions.put(
				"quantiteDisponible", Stock::getQuantiteDisponible);
			attributeGetterFunctions.put(
				"dateDerniereMaj", Stock::getDateDerniereMaj);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Stock, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Stock, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Stock, ?>>();

			attributeSetterBiConsumers.put(
				"idStock", (BiConsumer<Stock, Long>)Stock::setIdStock);
			attributeSetterBiConsumers.put(
				"idMedicament",
				(BiConsumer<Stock, Long>)Stock::setIdMedicament);
			attributeSetterBiConsumers.put(
				"quantiteDisponible",
				(BiConsumer<Stock, Integer>)Stock::setQuantiteDisponible);
			attributeSetterBiConsumers.put(
				"dateDerniereMaj",
				(BiConsumer<Stock, Date>)Stock::setDateDerniereMaj);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getIdStock() {
		return _idStock;
	}

	@Override
	public void setIdStock(long idStock) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_idStock = idStock;
	}

	@JSON
	@Override
	public long getIdMedicament() {
		return _idMedicament;
	}

	@Override
	public void setIdMedicament(long idMedicament) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_idMedicament = idMedicament;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalIdMedicament() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("idMedicament"));
	}

	@JSON
	@Override
	public int getQuantiteDisponible() {
		return _quantiteDisponible;
	}

	@Override
	public void setQuantiteDisponible(int quantiteDisponible) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quantiteDisponible = quantiteDisponible;
	}

	@JSON
	@Override
	public Date getDateDerniereMaj() {
		return _dateDerniereMaj;
	}

	@Override
	public void setDateDerniereMaj(Date dateDerniereMaj) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateDerniereMaj = dateDerniereMaj;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Stock.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Stock toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Stock>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StockImpl stockImpl = new StockImpl();

		stockImpl.setIdStock(getIdStock());
		stockImpl.setIdMedicament(getIdMedicament());
		stockImpl.setQuantiteDisponible(getQuantiteDisponible());
		stockImpl.setDateDerniereMaj(getDateDerniereMaj());

		stockImpl.resetOriginalValues();

		return stockImpl;
	}

	@Override
	public Stock cloneWithOriginalValues() {
		StockImpl stockImpl = new StockImpl();

		stockImpl.setIdStock(this.<Long>getColumnOriginalValue("idStock"));
		stockImpl.setIdMedicament(
			this.<Long>getColumnOriginalValue("idMedicament"));
		stockImpl.setQuantiteDisponible(
			this.<Integer>getColumnOriginalValue("quantiteDisponible"));
		stockImpl.setDateDerniereMaj(
			this.<Date>getColumnOriginalValue("dateDerniereMaj"));

		return stockImpl;
	}

	@Override
	public int compareTo(Stock stock) {
		long primaryKey = stock.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Stock)) {
			return false;
		}

		Stock stock = (Stock)object;

		long primaryKey = stock.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Stock> toCacheModel() {
		StockCacheModel stockCacheModel = new StockCacheModel();

		stockCacheModel.idStock = getIdStock();

		stockCacheModel.idMedicament = getIdMedicament();

		stockCacheModel.quantiteDisponible = getQuantiteDisponible();

		Date dateDerniereMaj = getDateDerniereMaj();

		if (dateDerniereMaj != null) {
			stockCacheModel.dateDerniereMaj = dateDerniereMaj.getTime();
		}
		else {
			stockCacheModel.dateDerniereMaj = Long.MIN_VALUE;
		}

		return stockCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Stock, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Stock, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Stock, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Stock)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Stock>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Stock.class, ModelWrapper.class);

	}

	private long _idStock;
	private long _idMedicament;
	private int _quantiteDisponible;
	private Date _dateDerniereMaj;

	public <T> T getColumnValue(String columnName) {
		Function<Stock, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Stock)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("idStock", _idStock);
		_columnOriginalValues.put("idMedicament", _idMedicament);
		_columnOriginalValues.put("quantiteDisponible", _quantiteDisponible);
		_columnOriginalValues.put("dateDerniereMaj", _dateDerniereMaj);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("idStock", 1L);

		columnBitmasks.put("idMedicament", 2L);

		columnBitmasks.put("quantiteDisponible", 4L);

		columnBitmasks.put("dateDerniereMaj", 8L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Stock _escapedModel;

}