/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package gestion_de_pharmacie.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import gestion_de_pharmacie.model.Notification;
import gestion_de_pharmacie.model.NotificationModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Notification service. Represents a row in the &quot;Pharma_Notification&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>NotificationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NotificationImpl}.
 * </p>
 *
 * @author Farouk
 * @see NotificationImpl
 * @generated
 */
@JSON(strict = true)
public class NotificationModelImpl
	extends BaseModelImpl<Notification> implements NotificationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a notification model instance should use the <code>Notification</code> interface instead.
	 */
	public static final String TABLE_NAME = "Pharma_Notification";

	public static final Object[][] TABLE_COLUMNS = {
		{"idNotification", Types.BIGINT}, {"idUtilisateur", Types.BIGINT},
		{"type_", Types.VARCHAR}, {"message", Types.VARCHAR},
		{"statut", Types.VARCHAR}, {"dateCreation", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("idNotification", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("idUtilisateur", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("type_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("message", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statut", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateCreation", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Pharma_Notification (idNotification LONG not null primary key,idUtilisateur LONG,type_ VARCHAR(75) null,message VARCHAR(75) null,statut VARCHAR(75) null,dateCreation DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table Pharma_Notification";

	public static final String ORDER_BY_JPQL =
		" ORDER BY notification.idNotification ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Pharma_Notification.idNotification ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long IDNOTIFICATION_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public NotificationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _idNotification;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setIdNotification(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _idNotification;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Notification.class;
	}

	@Override
	public String getModelClassName() {
		return Notification.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Notification, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Notification, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Notification, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Notification)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Notification, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Notification, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Notification)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Notification, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Notification, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Notification, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Notification, Object>>
				attributeGetterFunctions =
					new LinkedHashMap<String, Function<Notification, Object>>();

			attributeGetterFunctions.put(
				"idNotification", Notification::getIdNotification);
			attributeGetterFunctions.put(
				"idUtilisateur", Notification::getIdUtilisateur);
			attributeGetterFunctions.put("type", Notification::getType);
			attributeGetterFunctions.put("message", Notification::getMessage);
			attributeGetterFunctions.put("statut", Notification::getStatut);
			attributeGetterFunctions.put(
				"dateCreation", Notification::getDateCreation);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Notification, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Notification, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap<String, BiConsumer<Notification, ?>>();

			attributeSetterBiConsumers.put(
				"idNotification",
				(BiConsumer<Notification, Long>)
					Notification::setIdNotification);
			attributeSetterBiConsumers.put(
				"idUtilisateur",
				(BiConsumer<Notification, Long>)Notification::setIdUtilisateur);
			attributeSetterBiConsumers.put(
				"type",
				(BiConsumer<Notification, String>)Notification::setType);
			attributeSetterBiConsumers.put(
				"message",
				(BiConsumer<Notification, String>)Notification::setMessage);
			attributeSetterBiConsumers.put(
				"statut",
				(BiConsumer<Notification, String>)Notification::setStatut);
			attributeSetterBiConsumers.put(
				"dateCreation",
				(BiConsumer<Notification, Date>)Notification::setDateCreation);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getIdNotification() {
		return _idNotification;
	}

	@Override
	public void setIdNotification(long idNotification) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_idNotification = idNotification;
	}

	@JSON
	@Override
	public long getIdUtilisateur() {
		return _idUtilisateur;
	}

	@Override
	public void setIdUtilisateur(long idUtilisateur) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_idUtilisateur = idUtilisateur;
	}

	@JSON
	@Override
	public String getType() {
		if (_type == null) {
			return "";
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_type = type;
	}

	@JSON
	@Override
	public String getMessage() {
		if (_message == null) {
			return "";
		}
		else {
			return _message;
		}
	}

	@Override
	public void setMessage(String message) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_message = message;
	}

	@JSON
	@Override
	public String getStatut() {
		if (_statut == null) {
			return "";
		}
		else {
			return _statut;
		}
	}

	@Override
	public void setStatut(String statut) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statut = statut;
	}

	@JSON
	@Override
	public Date getDateCreation() {
		return _dateCreation;
	}

	@Override
	public void setDateCreation(Date dateCreation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateCreation = dateCreation;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Notification.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Notification toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Notification>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NotificationImpl notificationImpl = new NotificationImpl();

		notificationImpl.setIdNotification(getIdNotification());
		notificationImpl.setIdUtilisateur(getIdUtilisateur());
		notificationImpl.setType(getType());
		notificationImpl.setMessage(getMessage());
		notificationImpl.setStatut(getStatut());
		notificationImpl.setDateCreation(getDateCreation());

		notificationImpl.resetOriginalValues();

		return notificationImpl;
	}

	@Override
	public Notification cloneWithOriginalValues() {
		NotificationImpl notificationImpl = new NotificationImpl();

		notificationImpl.setIdNotification(
			this.<Long>getColumnOriginalValue("idNotification"));
		notificationImpl.setIdUtilisateur(
			this.<Long>getColumnOriginalValue("idUtilisateur"));
		notificationImpl.setType(this.<String>getColumnOriginalValue("type_"));
		notificationImpl.setMessage(
			this.<String>getColumnOriginalValue("message"));
		notificationImpl.setStatut(
			this.<String>getColumnOriginalValue("statut"));
		notificationImpl.setDateCreation(
			this.<Date>getColumnOriginalValue("dateCreation"));

		return notificationImpl;
	}

	@Override
	public int compareTo(Notification notification) {
		long primaryKey = notification.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Notification)) {
			return false;
		}

		Notification notification = (Notification)object;

		long primaryKey = notification.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Notification> toCacheModel() {
		NotificationCacheModel notificationCacheModel =
			new NotificationCacheModel();

		notificationCacheModel.idNotification = getIdNotification();

		notificationCacheModel.idUtilisateur = getIdUtilisateur();

		notificationCacheModel.type = getType();

		String type = notificationCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			notificationCacheModel.type = null;
		}

		notificationCacheModel.message = getMessage();

		String message = notificationCacheModel.message;

		if ((message != null) && (message.length() == 0)) {
			notificationCacheModel.message = null;
		}

		notificationCacheModel.statut = getStatut();

		String statut = notificationCacheModel.statut;

		if ((statut != null) && (statut.length() == 0)) {
			notificationCacheModel.statut = null;
		}

		Date dateCreation = getDateCreation();

		if (dateCreation != null) {
			notificationCacheModel.dateCreation = dateCreation.getTime();
		}
		else {
			notificationCacheModel.dateCreation = Long.MIN_VALUE;
		}

		return notificationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Notification, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Notification, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Notification, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Notification)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Notification>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Notification.class, ModelWrapper.class);

	}

	private long _idNotification;
	private long _idUtilisateur;
	private String _type;
	private String _message;
	private String _statut;
	private Date _dateCreation;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Notification, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Notification)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("idNotification", _idNotification);
		_columnOriginalValues.put("idUtilisateur", _idUtilisateur);
		_columnOriginalValues.put("type_", _type);
		_columnOriginalValues.put("message", _message);
		_columnOriginalValues.put("statut", _statut);
		_columnOriginalValues.put("dateCreation", _dateCreation);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("type_", "type");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("idNotification", 1L);

		columnBitmasks.put("idUtilisateur", 2L);

		columnBitmasks.put("type_", 4L);

		columnBitmasks.put("message", 8L);

		columnBitmasks.put("statut", 16L);

		columnBitmasks.put("dateCreation", 32L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Notification _escapedModel;

}