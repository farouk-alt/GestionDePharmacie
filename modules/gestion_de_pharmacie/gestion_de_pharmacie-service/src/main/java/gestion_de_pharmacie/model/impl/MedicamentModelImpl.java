/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package gestion_de_pharmacie.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import gestion_de_pharmacie.model.Medicament;
import gestion_de_pharmacie.model.MedicamentModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Medicament service. Represents a row in the &quot;Pharma_Medicament&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>MedicamentModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MedicamentImpl}.
 * </p>
 *
 * @author Farouk
 * @see MedicamentImpl
 * @generated
 */
@JSON(strict = true)
public class MedicamentModelImpl
	extends BaseModelImpl<Medicament> implements MedicamentModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a medicament model instance should use the <code>Medicament</code> interface instead.
	 */
	public static final String TABLE_NAME = "Pharma_Medicament";

	public static final Object[][] TABLE_COLUMNS = {
		{"idMedicament", Types.BIGINT}, {"code_", Types.VARCHAR},
		{"codeBarre", Types.VARCHAR}, {"nom", Types.VARCHAR},
		{"description", Types.VARCHAR}, {"categorie", Types.VARCHAR},
		{"prixUnitaire", Types.DOUBLE}, {"seuilMinimum", Types.INTEGER},
		{"dateAjout", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("idMedicament", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("code_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("codeBarre", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nom", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("categorie", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("prixUnitaire", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("seuilMinimum", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("dateAjout", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Pharma_Medicament (idMedicament LONG not null primary key,code_ VARCHAR(75) null,codeBarre VARCHAR(75) null,nom VARCHAR(75) null,description VARCHAR(75) null,categorie VARCHAR(75) null,prixUnitaire DOUBLE,seuilMinimum INTEGER,dateAjout DATE null)";

	public static final String TABLE_SQL_DROP = "drop table Pharma_Medicament";

	public static final String ORDER_BY_JPQL =
		" ORDER BY medicament.idMedicament ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Pharma_Medicament.idMedicament ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CATEGORIE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CODE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CODEBARRE_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NOM_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long IDMEDICAMENT_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public MedicamentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _idMedicament;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setIdMedicament(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _idMedicament;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Medicament.class;
	}

	@Override
	public String getModelClassName() {
		return Medicament.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Medicament, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Medicament, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Medicament, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Medicament)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Medicament, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Medicament, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Medicament)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Medicament, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Medicament, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Medicament, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Medicament, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Medicament, Object>>();

			attributeGetterFunctions.put(
				"idMedicament", Medicament::getIdMedicament);
			attributeGetterFunctions.put("code", Medicament::getCode);
			attributeGetterFunctions.put("codeBarre", Medicament::getCodeBarre);
			attributeGetterFunctions.put("nom", Medicament::getNom);
			attributeGetterFunctions.put(
				"description", Medicament::getDescription);
			attributeGetterFunctions.put("categorie", Medicament::getCategorie);
			attributeGetterFunctions.put(
				"prixUnitaire", Medicament::getPrixUnitaire);
			attributeGetterFunctions.put(
				"seuilMinimum", Medicament::getSeuilMinimum);
			attributeGetterFunctions.put("dateAjout", Medicament::getDateAjout);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Medicament, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Medicament, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Medicament, ?>>();

			attributeSetterBiConsumers.put(
				"idMedicament",
				(BiConsumer<Medicament, Long>)Medicament::setIdMedicament);
			attributeSetterBiConsumers.put(
				"code", (BiConsumer<Medicament, String>)Medicament::setCode);
			attributeSetterBiConsumers.put(
				"codeBarre",
				(BiConsumer<Medicament, String>)Medicament::setCodeBarre);
			attributeSetterBiConsumers.put(
				"nom", (BiConsumer<Medicament, String>)Medicament::setNom);
			attributeSetterBiConsumers.put(
				"description",
				(BiConsumer<Medicament, String>)Medicament::setDescription);
			attributeSetterBiConsumers.put(
				"categorie",
				(BiConsumer<Medicament, String>)Medicament::setCategorie);
			attributeSetterBiConsumers.put(
				"prixUnitaire",
				(BiConsumer<Medicament, Double>)Medicament::setPrixUnitaire);
			attributeSetterBiConsumers.put(
				"seuilMinimum",
				(BiConsumer<Medicament, Integer>)Medicament::setSeuilMinimum);
			attributeSetterBiConsumers.put(
				"dateAjout",
				(BiConsumer<Medicament, Date>)Medicament::setDateAjout);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getIdMedicament() {
		return _idMedicament;
	}

	@Override
	public void setIdMedicament(long idMedicament) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_idMedicament = idMedicament;
	}

	@JSON
	@Override
	public String getCode() {
		if (_code == null) {
			return "";
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_code = code;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCode() {
		return getColumnOriginalValue("code_");
	}

	@JSON
	@Override
	public String getCodeBarre() {
		if (_codeBarre == null) {
			return "";
		}
		else {
			return _codeBarre;
		}
	}

	@Override
	public void setCodeBarre(String codeBarre) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_codeBarre = codeBarre;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCodeBarre() {
		return getColumnOriginalValue("codeBarre");
	}

	@JSON
	@Override
	public String getNom() {
		if (_nom == null) {
			return "";
		}
		else {
			return _nom;
		}
	}

	@Override
	public void setNom(String nom) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nom = nom;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalNom() {
		return getColumnOriginalValue("nom");
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@JSON
	@Override
	public String getCategorie() {
		if (_categorie == null) {
			return "";
		}
		else {
			return _categorie;
		}
	}

	@Override
	public void setCategorie(String categorie) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_categorie = categorie;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCategorie() {
		return getColumnOriginalValue("categorie");
	}

	@JSON
	@Override
	public double getPrixUnitaire() {
		return _prixUnitaire;
	}

	@Override
	public void setPrixUnitaire(double prixUnitaire) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_prixUnitaire = prixUnitaire;
	}

	@JSON
	@Override
	public int getSeuilMinimum() {
		return _seuilMinimum;
	}

	@Override
	public void setSeuilMinimum(int seuilMinimum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_seuilMinimum = seuilMinimum;
	}

	@JSON
	@Override
	public Date getDateAjout() {
		return _dateAjout;
	}

	@Override
	public void setDateAjout(Date dateAjout) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateAjout = dateAjout;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Medicament.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Medicament toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Medicament>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MedicamentImpl medicamentImpl = new MedicamentImpl();

		medicamentImpl.setIdMedicament(getIdMedicament());
		medicamentImpl.setCode(getCode());
		medicamentImpl.setCodeBarre(getCodeBarre());
		medicamentImpl.setNom(getNom());
		medicamentImpl.setDescription(getDescription());
		medicamentImpl.setCategorie(getCategorie());
		medicamentImpl.setPrixUnitaire(getPrixUnitaire());
		medicamentImpl.setSeuilMinimum(getSeuilMinimum());
		medicamentImpl.setDateAjout(getDateAjout());

		medicamentImpl.resetOriginalValues();

		return medicamentImpl;
	}

	@Override
	public Medicament cloneWithOriginalValues() {
		MedicamentImpl medicamentImpl = new MedicamentImpl();

		medicamentImpl.setIdMedicament(
			this.<Long>getColumnOriginalValue("idMedicament"));
		medicamentImpl.setCode(this.<String>getColumnOriginalValue("code_"));
		medicamentImpl.setCodeBarre(
			this.<String>getColumnOriginalValue("codeBarre"));
		medicamentImpl.setNom(this.<String>getColumnOriginalValue("nom"));
		medicamentImpl.setDescription(
			this.<String>getColumnOriginalValue("description"));
		medicamentImpl.setCategorie(
			this.<String>getColumnOriginalValue("categorie"));
		medicamentImpl.setPrixUnitaire(
			this.<Double>getColumnOriginalValue("prixUnitaire"));
		medicamentImpl.setSeuilMinimum(
			this.<Integer>getColumnOriginalValue("seuilMinimum"));
		medicamentImpl.setDateAjout(
			this.<Date>getColumnOriginalValue("dateAjout"));

		return medicamentImpl;
	}

	@Override
	public int compareTo(Medicament medicament) {
		long primaryKey = medicament.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Medicament)) {
			return false;
		}

		Medicament medicament = (Medicament)object;

		long primaryKey = medicament.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Medicament> toCacheModel() {
		MedicamentCacheModel medicamentCacheModel = new MedicamentCacheModel();

		medicamentCacheModel.idMedicament = getIdMedicament();

		medicamentCacheModel.code = getCode();

		String code = medicamentCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			medicamentCacheModel.code = null;
		}

		medicamentCacheModel.codeBarre = getCodeBarre();

		String codeBarre = medicamentCacheModel.codeBarre;

		if ((codeBarre != null) && (codeBarre.length() == 0)) {
			medicamentCacheModel.codeBarre = null;
		}

		medicamentCacheModel.nom = getNom();

		String nom = medicamentCacheModel.nom;

		if ((nom != null) && (nom.length() == 0)) {
			medicamentCacheModel.nom = null;
		}

		medicamentCacheModel.description = getDescription();

		String description = medicamentCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			medicamentCacheModel.description = null;
		}

		medicamentCacheModel.categorie = getCategorie();

		String categorie = medicamentCacheModel.categorie;

		if ((categorie != null) && (categorie.length() == 0)) {
			medicamentCacheModel.categorie = null;
		}

		medicamentCacheModel.prixUnitaire = getPrixUnitaire();

		medicamentCacheModel.seuilMinimum = getSeuilMinimum();

		Date dateAjout = getDateAjout();

		if (dateAjout != null) {
			medicamentCacheModel.dateAjout = dateAjout.getTime();
		}
		else {
			medicamentCacheModel.dateAjout = Long.MIN_VALUE;
		}

		return medicamentCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Medicament, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Medicament, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Medicament, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Medicament)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Medicament>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Medicament.class, ModelWrapper.class);

	}

	private long _idMedicament;
	private String _code;
	private String _codeBarre;
	private String _nom;
	private String _description;
	private String _categorie;
	private double _prixUnitaire;
	private int _seuilMinimum;
	private Date _dateAjout;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Medicament, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Medicament)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("idMedicament", _idMedicament);
		_columnOriginalValues.put("code_", _code);
		_columnOriginalValues.put("codeBarre", _codeBarre);
		_columnOriginalValues.put("nom", _nom);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("categorie", _categorie);
		_columnOriginalValues.put("prixUnitaire", _prixUnitaire);
		_columnOriginalValues.put("seuilMinimum", _seuilMinimum);
		_columnOriginalValues.put("dateAjout", _dateAjout);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("code_", "code");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("idMedicament", 1L);

		columnBitmasks.put("code_", 2L);

		columnBitmasks.put("codeBarre", 4L);

		columnBitmasks.put("nom", 8L);

		columnBitmasks.put("description", 16L);

		columnBitmasks.put("categorie", 32L);

		columnBitmasks.put("prixUnitaire", 64L);

		columnBitmasks.put("seuilMinimum", 128L);

		columnBitmasks.put("dateAjout", 256L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Medicament _escapedModel;

}