/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package gestion_de_pharmacie.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import gestion_de_pharmacie.model.MouvementStock;
import gestion_de_pharmacie.model.MouvementStockModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the MouvementStock service. Represents a row in the &quot;Pharma_MouvementStock&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>MouvementStockModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MouvementStockImpl}.
 * </p>
 *
 * @author Farouk
 * @see MouvementStockImpl
 * @generated
 */
@JSON(strict = true)
public class MouvementStockModelImpl
	extends BaseModelImpl<MouvementStock> implements MouvementStockModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a mouvement stock model instance should use the <code>MouvementStock</code> interface instead.
	 */
	public static final String TABLE_NAME = "Pharma_MouvementStock";

	public static final Object[][] TABLE_COLUMNS = {
		{"idMouvement", Types.BIGINT}, {"idStock", Types.BIGINT},
		{"typeMouvement", Types.VARCHAR}, {"quantite", Types.INTEGER},
		{"dateMouvement", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("idMouvement", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("idStock", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("typeMouvement", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("quantite", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("dateMouvement", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Pharma_MouvementStock (idMouvement LONG not null primary key,idStock LONG,typeMouvement VARCHAR(75) null,quantite INTEGER,dateMouvement DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table Pharma_MouvementStock";

	public static final String ORDER_BY_JPQL =
		" ORDER BY mouvementStock.idMouvement ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Pharma_MouvementStock.idMouvement ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long IDMOUVEMENT_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public MouvementStockModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _idMouvement;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setIdMouvement(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _idMouvement;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MouvementStock.class;
	}

	@Override
	public String getModelClassName() {
		return MouvementStock.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<MouvementStock, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<MouvementStock, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MouvementStock, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((MouvementStock)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<MouvementStock, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<MouvementStock, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(MouvementStock)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<MouvementStock, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<MouvementStock, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<MouvementStock, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<MouvementStock, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<MouvementStock, Object>>();

			attributeGetterFunctions.put(
				"idMouvement", MouvementStock::getIdMouvement);
			attributeGetterFunctions.put("idStock", MouvementStock::getIdStock);
			attributeGetterFunctions.put(
				"typeMouvement", MouvementStock::getTypeMouvement);
			attributeGetterFunctions.put(
				"quantite", MouvementStock::getQuantite);
			attributeGetterFunctions.put(
				"dateMouvement", MouvementStock::getDateMouvement);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<MouvementStock, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<MouvementStock, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap<String, BiConsumer<MouvementStock, ?>>();

			attributeSetterBiConsumers.put(
				"idMouvement",
				(BiConsumer<MouvementStock, Long>)
					MouvementStock::setIdMouvement);
			attributeSetterBiConsumers.put(
				"idStock",
				(BiConsumer<MouvementStock, Long>)MouvementStock::setIdStock);
			attributeSetterBiConsumers.put(
				"typeMouvement",
				(BiConsumer<MouvementStock, String>)
					MouvementStock::setTypeMouvement);
			attributeSetterBiConsumers.put(
				"quantite",
				(BiConsumer<MouvementStock, Integer>)
					MouvementStock::setQuantite);
			attributeSetterBiConsumers.put(
				"dateMouvement",
				(BiConsumer<MouvementStock, Date>)
					MouvementStock::setDateMouvement);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getIdMouvement() {
		return _idMouvement;
	}

	@Override
	public void setIdMouvement(long idMouvement) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_idMouvement = idMouvement;
	}

	@JSON
	@Override
	public long getIdStock() {
		return _idStock;
	}

	@Override
	public void setIdStock(long idStock) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_idStock = idStock;
	}

	@JSON
	@Override
	public String getTypeMouvement() {
		if (_typeMouvement == null) {
			return "";
		}
		else {
			return _typeMouvement;
		}
	}

	@Override
	public void setTypeMouvement(String typeMouvement) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_typeMouvement = typeMouvement;
	}

	@JSON
	@Override
	public int getQuantite() {
		return _quantite;
	}

	@Override
	public void setQuantite(int quantite) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quantite = quantite;
	}

	@JSON
	@Override
	public Date getDateMouvement() {
		return _dateMouvement;
	}

	@Override
	public void setDateMouvement(Date dateMouvement) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateMouvement = dateMouvement;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, MouvementStock.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MouvementStock toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, MouvementStock>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MouvementStockImpl mouvementStockImpl = new MouvementStockImpl();

		mouvementStockImpl.setIdMouvement(getIdMouvement());
		mouvementStockImpl.setIdStock(getIdStock());
		mouvementStockImpl.setTypeMouvement(getTypeMouvement());
		mouvementStockImpl.setQuantite(getQuantite());
		mouvementStockImpl.setDateMouvement(getDateMouvement());

		mouvementStockImpl.resetOriginalValues();

		return mouvementStockImpl;
	}

	@Override
	public MouvementStock cloneWithOriginalValues() {
		MouvementStockImpl mouvementStockImpl = new MouvementStockImpl();

		mouvementStockImpl.setIdMouvement(
			this.<Long>getColumnOriginalValue("idMouvement"));
		mouvementStockImpl.setIdStock(
			this.<Long>getColumnOriginalValue("idStock"));
		mouvementStockImpl.setTypeMouvement(
			this.<String>getColumnOriginalValue("typeMouvement"));
		mouvementStockImpl.setQuantite(
			this.<Integer>getColumnOriginalValue("quantite"));
		mouvementStockImpl.setDateMouvement(
			this.<Date>getColumnOriginalValue("dateMouvement"));

		return mouvementStockImpl;
	}

	@Override
	public int compareTo(MouvementStock mouvementStock) {
		long primaryKey = mouvementStock.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof MouvementStock)) {
			return false;
		}

		MouvementStock mouvementStock = (MouvementStock)object;

		long primaryKey = mouvementStock.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<MouvementStock> toCacheModel() {
		MouvementStockCacheModel mouvementStockCacheModel =
			new MouvementStockCacheModel();

		mouvementStockCacheModel.idMouvement = getIdMouvement();

		mouvementStockCacheModel.idStock = getIdStock();

		mouvementStockCacheModel.typeMouvement = getTypeMouvement();

		String typeMouvement = mouvementStockCacheModel.typeMouvement;

		if ((typeMouvement != null) && (typeMouvement.length() == 0)) {
			mouvementStockCacheModel.typeMouvement = null;
		}

		mouvementStockCacheModel.quantite = getQuantite();

		Date dateMouvement = getDateMouvement();

		if (dateMouvement != null) {
			mouvementStockCacheModel.dateMouvement = dateMouvement.getTime();
		}
		else {
			mouvementStockCacheModel.dateMouvement = Long.MIN_VALUE;
		}

		return mouvementStockCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<MouvementStock, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<MouvementStock, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MouvementStock, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((MouvementStock)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, MouvementStock>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					MouvementStock.class, ModelWrapper.class);

	}

	private long _idMouvement;
	private long _idStock;
	private String _typeMouvement;
	private int _quantite;
	private Date _dateMouvement;

	public <T> T getColumnValue(String columnName) {
		Function<MouvementStock, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((MouvementStock)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("idMouvement", _idMouvement);
		_columnOriginalValues.put("idStock", _idStock);
		_columnOriginalValues.put("typeMouvement", _typeMouvement);
		_columnOriginalValues.put("quantite", _quantite);
		_columnOriginalValues.put("dateMouvement", _dateMouvement);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("idMouvement", 1L);

		columnBitmasks.put("idStock", 2L);

		columnBitmasks.put("typeMouvement", 4L);

		columnBitmasks.put("quantite", 8L);

		columnBitmasks.put("dateMouvement", 16L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private MouvementStock _escapedModel;

}